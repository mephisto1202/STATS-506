{
  "hash": "22725ff22ec8faed7d2317725e910ff3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"HW1\"\noutput:\n  html_document:\n    self_contained: yes\n---\n\n\n## **https://github.com/mephisto1202/STATS-506.git**\n## **Problem 1 - Abalone Data**\n\n1.1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Step 1: Read the raw data from the CSV file.\nabalone <- read.csv(\"abalone.data\", header = FALSE) \n#' Step 2: Define the correct column names.\ncolumn_names <- c( \"Sex\", \"Length\", \"Diameter\", \"Height\", \"Whole_weight\", \"Shucked_weight\", \"Viscera_weight\", \"Shell_weight\", \"Rings\" ) \n#' Step 3: Assign the defined names to the data frame's columns.\ncolnames(abalone) <- column_names \n#' Step 4: Display the first few rows to verify the data was loaded correctly.\nhead(abalone)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sex Length Diameter Height Whole_weight Shucked_weight Viscera_weight\n1   M  0.455    0.365  0.095       0.5140         0.2245         0.1010\n2   M  0.350    0.265  0.090       0.2255         0.0995         0.0485\n3   F  0.530    0.420  0.135       0.6770         0.2565         0.1415\n4   M  0.440    0.365  0.125       0.5160         0.2155         0.1140\n5   I  0.330    0.255  0.080       0.2050         0.0895         0.0395\n6   I  0.425    0.300  0.095       0.3515         0.1410         0.0775\n  Shell_weight Rings\n1        0.150    15\n2        0.070     7\n3        0.210     9\n4        0.155    10\n5        0.055     7\n6        0.120     8\n```\n\n\n:::\n:::\n\n\n\n1.2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Step 1: Use table() to calculate number in different sex.\nsex_counts <- table(abalone$Sex)\n#' Step 2: Use print to output the data.\nprint(sex_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   F    I    M \n1307 1342 1528 \n```\n\n\n:::\n:::\n\n\n\n1.3\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#'Step 1: Calculate different weights' correlation with rings.\nwhole_weight_cor <- cor(abalone$Whole_weight, abalone$Rings)\nshucked_weight_cor <- cor(abalone$Shucked_weight, abalone$Rings)\nviscera_weight_cor <- cor(abalone$Viscera_weight, abalone$Rings)\nshell_weight_cor <- cor(abalone$Shell_weight, abalone$Rings)\n#'Step 2: Put the value and the name in a group,which can help us compare later.\ngroup1 <- c(\n  \"Whole_weight\" = cor(abalone$Whole_weight, abalone$Rings),\n  \"Shucked_weight\" = cor(abalone$Shucked_weight, abalone$Rings),\n  \"Viscera_weight\" = cor(abalone$Viscera_weight, abalone$Rings),\n  \"Shell_weight\" = cor(abalone$Shell_weight, abalone$Rings)\n)\n#'Step 3: Compare the value and get the max value and its name.\nhighest_corr <- which.max(abs(group1))\ncat(\"the weight which has the highest correlation with rings is:\", names(highest_corr), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthe weight which has the highest correlation with rings is: Shell_weight \n```\n\n\n:::\n\n```{.r .cell-code}\n#'Step 1: Separate the data into different sex groups.\nabalone_F <- subset(abalone, Sex == \"F\")\nabalone_I <- subset(abalone, Sex == \"I\")\nabalone_M <- subset(abalone, Sex == \"M\")\nhighest_corr_name <-names(highest_corr)\n#'Step 2: Calculate the different correlation.\ncor_F <- cor(abalone_F[,names(highest_corr)], abalone_F$Rings)\ncor_I <- cor(abalone_I[,names(highest_corr)], abalone_I$Rings)\ncor_M <- cor(abalone_M[,names(highest_corr)], abalone_M$Rings)\n\n#'Step 3: Compare by the sex.\ngroup2 <- c(\n  \"F\" = cor_F,\n  \"I\" = cor_I,\n  \"M\" = cor_M\n)\nhighest_sex <- which.max(abs(group2))\ncat(\"the sex has the highest correlation is:\", names(highest_sex), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthe sex has the highest correlation is: I \n```\n\n\n:::\n\n```{.r .cell-code}\n#'Step 1: Find the max ring.\nmax_rings <- max(abalone$Rings)\n#'Step 2: Find the data with the max ring.\nmax_rings_data <- abalone[abalone$Rings == max_rings, ]\n#'Step 3: Print.\ncat(\"the weights of the abalone with the most rings are:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthe weights of the abalone with the most rings are:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(max_rings_data[, c(\"Whole_weight\", \"Shucked_weight\", \"Viscera_weight\", \"Shell_weight\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Whole_weight Shucked_weight Viscera_weight Shell_weight\n481       1.8075         0.7055         0.3215        0.475\n```\n\n\n:::\n\n```{.r .cell-code}\npercentage <- sum(abalone$Viscera_weight > abalone$Shell_weight) / nrow(abalone) * 100\ncat(\"the percentage of abalones have a viscera weight larger than their shell weight is:\", round(percentage, 2), \"%\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthe percentage of abalones have a viscera weight larger than their shell weight is: 6.51 %\n```\n\n\n:::\n:::\n\n\n\n## **Problem 2 - Food Expenditure Data**\n\n2.1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' import data\nfood_data <- read.csv(\"food_expenditure.csv\", header = TRUE)\n```\n:::\n\n\n\n2.2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#'Step 1: Simplify the name.\nnew_column_names <- c(\n  \"id\", \"age\", \"household_size\", \"state\", \"currency\",\n  \"total_expenditure\", \"grocery_expenditure\", \"dining_out_expenditure\",\n  \"misc_expenditure\", \"dining_out_times\", \"incl_alcohol\", \"food_assistance\"\n)\n#' Step 2: Replace the name.\ncolnames(food_data) <- new_column_names\n#' Step 3: Check the name.\nnames(food_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                     \"age\"                    \"household_size\"        \n [4] \"state\"                  \"currency\"               \"total_expenditure\"     \n [7] \"grocery_expenditure\"    \"dining_out_expenditure\" \"misc_expenditure\"      \n[10] \"dining_out_times\"       \"incl_alcohol\"           \"food_assistance\"       \n```\n\n\n:::\n:::\n\n\n\n2.3\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Step 1: Show the counts before restrict.\ncat(\"Before:\", nrow(food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBefore: 262 \n```\n\n\n:::\n\n```{.r .cell-code}\n#' Step 2: restrict to USD.\nfood_data_usd <- subset(food_data, currency == \"USD\")\n#' Step 3: Show the counts after restrict.\ncat(\"After:\", nrow(food_data_usd), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAfter: 230 \n```\n\n\n:::\n:::\n\n\n\n2.4\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_food_data <- food_data_usd\n#' Step 1: Show the lines before cleaning.\ncat(\"Before:\", nrow(cleaned_food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBefore: 230 \n```\n\n\n:::\n\n```{.r .cell-code}\n#' Step 2: Clean the data age under 18.\ncleaned_food_data <- subset(cleaned_food_data, age >= 18)\ncat(\"After(age):\", nrow(cleaned_food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAfter(age): 199 \n```\n\n\n:::\n\n```{.r .cell-code}\n#' Step 3: Clean the data state that is none.\ncleaned_food_data <- subset(cleaned_food_data, state != \"\" & state != \"None\")\ncat(\"Afer(state):\", nrow(cleaned_food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAfer(state): 194 \n```\n\n\n:::\n\n```{.r .cell-code}\n#' Step 4: Clean the data expenditure is negative.\ncleaned_food_data <- subset(cleaned_food_data, total_expenditure >= 0 & \n                                  grocery_expenditure >= 0 & \n                                  dining_out_expenditure >= 0 & \n                                  misc_expenditure >= 0)\ncat(\"Afer(expenditure):\", nrow(cleaned_food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAfer(expenditure): 135 \n```\n\n\n:::\n\n```{.r .cell-code}\n#' Step 5: Clean the data out times is over 21(because people only eat 21 times in a week).\ncleaned_food_data <- subset(cleaned_food_data, dining_out_times <= 21)\ncat(\"After(out times):\", nrow(cleaned_food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAfter(out times): 132 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"--- Final repoert ---\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n--- Final repoert ---\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"After all clean,the counts are:\", nrow(cleaned_food_data), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAfter all clean,the counts are: 132 \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(cleaned_food_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id age household_size state currency total_expenditure grocery_expenditure\n1   1  68              7    LA      USD            436.35              168.59\n3   3  82              3    MS      USD             279.1              301.66\n7   7  38              4    DC      USD            318.79              153.49\n10 10  84              1    HI      USD            332.08              236.68\n12 12  29              5    UT      USD            622.58              144.16\n13 13  90              7    DC      USD            292.08              168.88\n   dining_out_expenditure misc_expenditure dining_out_times incl_alcohol\n1                  140.71           109.77                4          Yes\n3                  239.84           103.94                9          Yes\n7                  104.05            39.21                1          Yes\n10                 105.59            38.86                9      Unknown\n12                  58.50            14.73                5           No\n13                  64.77            29.12                8          Yes\n   food_assistance\n1             None\n3             None\n7             SNAP\n10            None\n12            None\n13            SNAP\n```\n\n\n:::\n:::\n\n\n\n## **Problem 3 - Collatz conjecture**\n\n3.1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Compute the next number in a Collatz sequence.\n#' This function takes a positive integer and applies the Collatz conjecture rules:\n#' if the number is even, it divides it by 2; if it's odd, it multiplies it by 3 and adds 1.\n#' @param n A single positive integer.\n#' @return A positive integer representing the next number in the Collatz sequence.\n#' @examples\n#' nextCollatz(5)\n#' nextCollatz(16)\n#' @export\nnextCollatz <- function(n) {\n  #' Step 1: Check if n is a single positive integer.\n  if (length(n) != 1 || !is.numeric(n) || n <= 0 || n %% 1 != 0) {\n    stop(\"Input must be a single positive integer.\")\n  }\n\n  #' Step 2: Use the Collatz rules.\n  if (n %% 2 == 0) {\n    return(n / 2)\n  } \n  else {\n    return(3 * n + 1)\n  }\n}\ncat(\"nextCollatz(5) = \", nextCollatz(5), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnextCollatz(5) =  16 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"nextCollatz(16) = \", nextCollatz(16), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnextCollatz(16) =  8 \n```\n\n\n:::\n:::\n\n\n\n3.2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Generate a Collatz sequence.\n#' This function computes the complete Collatz sequence for a given positive integer,\n#' starting at the input and ending at 1. It uses the nextCollatz function\n#' to perform the step-by-step calculation.\n#' @param n A single positive integer.\n#' @return A list containing two elements:\n#'   - `sequence`: A numeric vector of the entries in the Collatz sequence.\n#'   - `length`: An integer representing the length of the sequence.\n#' @examples\n#' collatzSequence(5)\n#' collatzSequence(19)\n#' @export\ncollatzSequence <- function(n) {\n  #' Step 1: Check if n is a single positive integer\n  if (length(n) != 1 || !is.numeric(n) || n <= 0 || n %% 1 != 0) {\n    stop(\"Input must be a single positive integer.\")\n  }\n  current_number <- n\n  sequence <- c(n)\n  while (current_number != 1) {\n    current_number <- nextCollatz(current_number)\n    sequence <- c(sequence, current_number)\n  }\n  return(list(\n    sequence = sequence,\n    length = length(sequence)\n  ))\n}\ncat(\"collatzSequence(5) =\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncollatzSequence(5) =\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(collatzSequence(5)$sequence)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 16  8  4  2  1\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\ncollatzSequence(19) =\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncollatzSequence(19) =\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(collatzSequence(19)$sequence)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10  5 16  8  4  2  1\n```\n\n\n:::\n:::\n\n\n\n3.3\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Use Collatz sequence to find the shortest and longest sequence.\n#' Use virable to save the information about thelongest and shortest sequence.\nshortest_length <- Inf\nshortest_start <- NA\nlongest_length <- 0\nlongest_start <- NA\n\n#' Step 1: Use a loop to experience all number between 100 and 500.\nfor (i in 100:500) {\n  #' Step 2: Use if to judge whether need to update the longest or shortest sequence.\n  sequence_info <- collatzSequence(i)\n  current_length <- sequence_info$length\n  if (current_length < shortest_length) {\n    shortest_length <- current_length\n    shortest_start <- i\n  }\n  if (current_length > longest_length) {\n    longest_length <- current_length\n    longest_start <- i\n  }\n}\ncat(\"--- Final Report ---\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n--- Final Report ---\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"shortest:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshortest:\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"start:\", shortest_start, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nstart: 128 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"length:\", shortest_length, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlength: 8 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\n\")\n```\n\n```{.r .cell-code}\ncat(\"longest:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlongest:\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"start:\", longest_start, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nstart: 327 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"length:\", longest_length, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlength: 144 \n```\n\n\n:::\n:::\n",
    "supporting": [
      "HW1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}