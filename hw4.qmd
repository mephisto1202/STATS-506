---
title: "hw4"
format: html
self-contained: true
---

## Problem1

a

```{r}
options(repos = c(CRAN = "[https://cran.rstudio.com/](https://cran.rstudio.com/)"))
install.packages("nzelect")
library(tidyverse)
library(nzelect)
```

```{r}
data(nzge) 
```

```{r}
nzge %>%
  group_by(election_year, voting_type) %>%
  summarise(
    total_vote_count = sum(votes, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total_vote_count))%>%
  print(n = Inf)
```

b

```{r}
# calculate the total votes in 2014
total_2014_candidate_votes <- nzge %>%
  filter(election_year == 2014, voting_type == "Candidate") %>%
  summarise(grand_total = sum(votes, na.rm = TRUE)) %>%
  pull(grand_total)
# Then calculate the diffrerent party votes in total
proportion_2014_candidate_vote <- nzge %>%
  filter(election_year == 2014, voting_type == "Candidate") %>%
  group_by(party) %>%
  summarise(
    total_votes = sum(votes, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    percentage_of_votes = paste0(round(total_votes / total_2014_candidate_votes * 100, 2),"%")
    # for good display, only need two number after dot
  ) %>%
  arrange(desc(total_votes / total_2014_candidate_votes))

print(proportion_2014_candidate_vote)
```

c

```{r}
library(knitr)
data(nzge)

annual_vote_winners <- nzge %>%
  group_by(election_year, voting_type, party) %>%
  summarise(
    total_votes = sum(votes, na.rm = TRUE),
    .groups = "drop_last"
  ) %>%
  # In each group (election_year/voting_type) , choose the max total_votes
  slice_max(total_votes, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(Year = election_year, voting_type, winning_party = party) %>% 
  pivot_wider(
    names_from = voting_type,
    values_from = winning_party
  ) %>%
  rename(
    Candidate_Winner = Candidate,
    Party_Winner = Party
  )

# nice table
annual_vote_winners %>%
  kable(
    caption = "New Zealand different years (candidate votes/party votes) winner party",
    align = "ccc",                                        
  )
```

## Problem2

```{r}
library(tidyverse)
data_url <- "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/refs/heads/master/atp_matches_2019.csv"
tennis_data <- read_csv(data_url)
glimpse(tennis_data)
names(tennis_data)
```

a

```{r}
tournament_count_alt <- tennis_data %>%
  summarise(count = n_distinct(tourney_id))

print(tournament_count_alt)
```

b

this has two version, the difference is how to understand " win tournament"

```{r}
multi_match_winners_total <- tennis_data %>%
  # 1. group by and calculate each player's total win
  group_by(winner_id) %>%
  summarise(
    total_matches_won = n(), 
    .groups = "drop" 
  ) %>%
  # 2. filter, only need more than once 
  filter(total_matches_won > 1) %>%
  # 3. sort
  arrange(desc(total_matches_won))
players_count_v2 <- multi_match_winners_total %>% count() %>% pull(n)
max_matches_v2 <- multi_match_winners_total %>% 
  slice_max(total_matches_won, n = 1, with_ties = TRUE) %>% 
  pull(total_matches_won)
cat("1. the number of players win more than one time :", players_count_v2, "\n")
cat("2. the number of times most winning player(s) win:", max_matches_v2, "\n")
```

```         
```

```{r}
multi_tournament_champions_id_final <- tennis_data %>%
  # 1. group by tournament
  group_by(tourney_id) %>%
  # 2. find the champion ID,champion will not appear in loser 
  reframe(
    champion_id = setdiff(winner_id, loser_id), 
    .groups = "drop"
  ) %>%
  filter(!is.na(champion_id)) %>% 
  group_by(champion_id) %>%
  summarise(
    tournaments_won = n(),
    .groups = "drop"
  ) %>%
  filter(tournaments_won > 1) %>%
  arrange(desc(tournaments_won))
players_count_champion <- multi_tournament_champions_id_final %>% count() %>% pull(n)
max_tournaments_champion <- multi_tournament_champions_id_final %>% 
  slice_max(tournaments_won, n = 1, with_ties = TRUE) %>% 
  pull(tournaments_won) %>%
  first()
cat("1. number of players be the champion in the tournament more than one time:", players_count_champion, "\n")
cat("2. number of the player(s) has the most champion:", max_tournaments_champion, "\n")
```

but we can use the column round to find the final match to find the winner, but the answer is different

```{r}
library(tidyverse)
data_url <- "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/refs/heads/master/atp_matches_2019.csv"
tennis_data <- read_csv(data_url, show_col_types = FALSE)
multi_tournament_champions_round_final <- tennis_data %>%
  # 1. filter, only need the final match(round = f)
  filter(round == "F") %>%
  
  # 2.  select the tourney id and winner id
  select(tourney_id, champion_id = winner_id) %>%
  group_by(champion_id) %>%
  summarise(
    tournaments_won = n(),
    .groups = "drop"
  ) %>%
  filter(tournaments_won > 1) %>%
  left_join(
    tennis_data %>% 
      select(winner_id, winner_name) %>% 
      rename(champion_id = winner_id, champion_name = winner_name) %>%
      distinct(), 
    by = "champion_id"
  ) %>%
  arrange(desc(tournaments_won))
players_count_champion <- multi_tournament_champions_round_final %>% count() %>% pull(n)
max_tournaments_champion <- multi_tournament_champions_round_final %>% 
  slice_max(tournaments_won, n = 1, with_ties = TRUE) %>% 
  pull(tournaments_won) %>%
  first() 
cat("1. number of players be the champion in the tournament more than one time:", players_count_champion, "\n")
cat("2. number of the player(s) has the most champion:", max_tournaments_champion, "\n")
```

c

```{r}
install.packages("infer")
library(infer)
```

```{r}
# Calculate the difference in Aces (d = w_ace - l_ace)
ace_data_for_test <- tennis_data %>%
  select(w_ace, l_ace) %>%
  filter(!is.na(w_ace), !is.na(l_ace)) %>%
  mutate(diff_ace = w_ace - l_ace)

# Hypothesis Test 
ace_ttest_result <- ace_data_for_test %>%
  specify(response = diff_ace) %>%
  hypothesize(null = "point", mu = 0) %>%
  calculate(stat = "t")

num_reps<-10000
# Calculate P-value 
p_value_result <- ace_data_for_test %>%
  specify(response = diff_ace) %>%
  hypothesize(null = "point", mu = 0) %>%
  generate(reps = num_reps, type = "bootstrap") %>%
  calculate(stat = "t") %>%
  get_pvalue(obs_stat = ace_ttest_result, direction = "greater")


p_value_final <- p_value_result %>% pull(p_value)
cat("--- Problem 2c: Tidyverse (infer) Hypothesis Test Results (Enhanced Precision) ---\n")
cat("Observed t-statistic:", ace_ttest_result %>% pull(stat), "\n")

# Report P-value cautiously
if (p_value_final == 0) {
  cat(sprintf("P-value (One-sided test): < 1/%d (i.e., < %.4f)\n", num_reps, 1/num_reps))
} else {
  cat("P-value (One-sided test):", p_value_final, "\n")
}

cat("\nConclusion:\n")
# The conclusion remains the same since P-value is likely << 0.05
if (p_value_final < 0.05) {
  cat("As the P-value is less than the significance level (or its approximation), we reject the null hypothesis. There is strong statistical evidence that the mean number of Aces for winners is significantly greater than for losers.\n")
} else {
  cat("The P-value is greater than 0.05. We do not have sufficient evidence to reject the null hypothesis.\n")
}
```

d

```{r}
top_win_rate_players <- tennis_data %>%
  select(winner_id, winner_name, loser_id, loser_name) %>%
  
  # Reshape: Stack winner and loser columns into a single 'player-match' view
  pivot_longer(
    cols = ends_with("_id"), # Selects winner_id and loser_id
    names_to = "outcome_type",
    values_to = "player_id"
  ) %>%
  
  # Derive win status and player name
  mutate(
    # Determine if the match outcome was a win (TRUE/FALSE)
    is_win = (outcome_type == "winner_id"),
    player_name = ifelse(outcome_type == "winner_id", winner_name, loser_name)
  ) %>%

  group_by(player_id, player_name) %>%
  summarise(
    Total_Matches = n(),
    Wins = sum(is_win),
    .groups = "drop"
  ) %>%
  
  # Filter: Keep players with at least 5 matches
  filter(Total_Matches >= 5) %>%
  
  # Calculate win rate
  mutate(
    Win_Rate = Wins / Total_Matches
  ) %>%
slice_max(Win_Rate, n = 1, with_ties = TRUE) 
cat("\n--- Problem 2d: Highest Win Rate (Min 5 Matches) ---\n")
print(top_win_rate_players)
```

## Problem3

```{r}
install.packages(c("tidyverse", "scales"))
library(tidyverse)
library(scales) 
library(lubridate) 

COVID_DATA_URL <- "https://raw.githubusercontent.com/nytimes/covid-19-data/refs/heads/master/rolling-averages/us-states.csv"

# input population
state_populations <- tribble(
  ~state, ~population,
  "California", 39538223, "Texas", 29145505, "Florida", 21538187,
  "New York", 20201249, "Pennsylvania", 13002700, "Illinois", 12812508,
  "Ohio", 11799448, "Georgia", 10711908, "North Carolina", 10439388,
  "Michigan", 10077331, "New Jersey", 9288994, "Virginia", 8631393,
  "Washington", 7705281, "Arizona", 7151502, "Massachusetts", 7029917,
  "Tennessee", 6910840, "Indiana", 6785528, "Missouri", 6154913,
  "Maryland", 6177224, "Wisconsin", 5893718, "Colorado", 5773714,
  "Minnesota", 5706494, "South Carolina", 5118425, "Alabama", 5024279,
  "Louisiana", 4657757, "Kentucky", 4505836, "Oregon", 4237256,
  "Oklahoma", 3959353, "Connecticut", 3605944, "Utah", 3271616,
  "Iowa", 3190369, "Nevada", 3104614, "Arkansas", 3011524,
  "Kansas", 2937880, "Mississippi", 2961279, "New Mexico", 2117522,
  "Nebraska", 1961504, "West Virginia", 1793716, "Idaho", 1839106,
  "Hawaii", 1455271, "New Hampshire", 1377527, "Maine", 1362359,
  "Montana", 1084225, "Rhode Island", 1097379, "Delaware", 989948,
  "South Dakota", 886667, "North Dakota", 779094, "Alaska", 733391,
  "District of Columbia", 689545, "Vermont", 643077, "Wyoming", 576851
)

# --- load data 
df_covid <- read_csv(COVID_DATA_URL, show_col_types = FALSE) %>%
  rename(new_cases_avg = cases_avg) %>%
  mutate(date = as.Date(date))

# Exclude territories and join population data
territories <- c('Puerto Rico', 'Guam', 'Virgin Islands', 'Northern Mariana Islands')
df_covid_us <- df_covid %>%
  filter(!state %in% territories) %>%
  left_join(state_populations, by = "state")
```

a

```{r}
df_national <- df_covid_us %>%
  group_by(date) %>%
  summarise(national_cases_avg = sum(new_cases_avg, na.rm = TRUE))

# mark the spikes by hand(for better display)
spikes_df <- tribble(
  ~date, ~label, ~y_offset,
  "2020-07-20", "1. Summer Wave", 100000,
  "2021-01-08", "2. First Winter Peak", 300000,
  "2021-09-01", "3. Delta Wave", 200000,
  "2022-01-15", "4. Omicron Surge", 750000
) %>%
  mutate(date = as.Date(date))

plot_a <- df_national %>%
  ggplot(aes(x = date, y = national_cases_avg)) +
  geom_line(color = "#0072B2", linewidth = 1) +
  geom_text(data = spikes_df, 
            aes(label = label, x = date, y = y_offset), 
            color = "red", size = 3, hjust = 0.5) +
  geom_vline(data = spikes_df, aes(xintercept = date), 
             linetype = "dashed", color = "red", alpha = 0.6) +

  # Titles and Labels  
  labs(
    title = "Question a. US COVID-19 Daily New Cases: Peak Analysis",
    subtitle = "Source: NYTimes (7-Day Rolling Average). Major peaks are annotated.",
    x = "Date",
    y = "Daily New Cases (7-Day Avg.)",
    caption = "Argument: The chart clearly shows 4 major peaks and several minor fluctuations."
  ) +
  scale_y_continuous(labels = comma) +
  theme_minimal(base_size = 12) + 
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    panel.grid.minor = element_blank()
  )

 print(plot_a)
```

There are 4 major peaks and many minor spikes

b

```{r}
df_rate <- df_covid_us %>%
  group_by(state, population) %>%
  summarise(total_cases = max(cases, na.rm = TRUE)) %>%
  ungroup() %>%
  filter(!is.na(population) & state != "District of Columbia") %>%
  mutate(infection_rate_per_100k = (total_cases / population) * 100000)

top_state <- df_rate %>% arrange(desc(infection_rate_per_100k)) %>% slice(1) %>% pull(state)
bottom_state <- df_rate %>% arrange(infection_rate_per_100k) %>% slice(1) %>% pull(state)


df_compare <- df_covid_us %>%
  filter(state %in% c(top_state, bottom_state)) %>%
  mutate(new_cases_per_100k = (new_cases_avg / population) * 100000) %>%
  filter(!is.na(new_cases_per_100k)) 


plot_b <- df_compare %>%
  ggplot(aes(x = date, y = new_cases_per_100k, color = state)) +
  geom_line(linewidth = 1.2, alpha = 0.8) +
  
  labs(
    title = paste("Question b. COVID-19 Trajectory: Highest Rate State (", top_state, ") vs. Lowest Rate State (", bottom_state, ")"),
    subtitle = "Daily new cases standardized per 100,000 population.",
    x = "Date",
    y = "Daily New Cases (per 100k Pop.)",
    color = "State",
    caption = "Argument: The highest rate state shows consistently higher or sharper peaks in per-capita infection rates."
  ) +
  scale_y_continuous(labels = number_format(accuracy = 1)) +
  scale_color_manual(
    values = c(
      setNames("#E69F00", top_state),   
      setNames("#56B4E9", bottom_state) 
    ),
    name = "State" 
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "bottom"
  )

print(plot_b)
```

This distinction in peak magnitude directly correlates with their overall cumulative infection rates, suggesting that factors like high population density and urbanized travel patterns in Rhode Island amplified the effects of viral surges compared to the more dispersed population of Idaho.

c

```{r}
# Define a 'substantial' threshold (7-day avg. first reaches 10 cases)
threshold <- 10
early_period_end_date <- as.Date("2020-05-31") # Focus on early 2020

df_first_wave <- df_covid_us %>%
  filter(date <= early_period_end_date) %>%
  group_by(state) %>%
  # find each state'date for threshold
  filter(new_cases_avg >= threshold) %>%
  slice_min(date, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  arrange(date) %>%
  slice(1:5) # find first five states

first_five_states <- df_first_wave$state

df_c_plot <- df_covid_us %>%
  filter(state %in% first_five_states, date <= early_period_end_date) 
plot_c <- df_c_plot %>%
  ggplot(aes(x = date, y = new_cases_avg, color = state)) +
  geom_line(linewidth = 1.2) +
  geom_hline(yintercept = threshold, linetype = "dotted", color = "darkgrey") +
  labs(
    title = "Question c. Five States First to Experience Substantial COVID-19 (Early 2020)",
    subtitle = paste0("Focus period: Early 2020 to ", format(early_period_end_date, "%Y-%m-%d"), 
                     ". Dotted line marks the substantial threshold (", threshold, " cases)."),
    x = "Date",
    y = "Daily New Cases (7-Day Avg.)",
    color = "State",
    caption = paste("Argument: These states (", paste(first_five_states, collapse = ", "), ") crossed the growth threshold earliest, typically located near major international hubs."
  ) +
  scale_y_continuous(labels = comma) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "bottom"
  ))
 print(plot_c) 
print(paste("The five states first to experience substantial COVID-19 (based on >= ", threshold, " cases) is:", paste(first_five_states, collapse = ", ")))
```
