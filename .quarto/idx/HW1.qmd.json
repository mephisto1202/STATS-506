{"title":"HW1","markdown":{"yaml":{"title":"HW1","output":{"html_document":{"self_contained":"yes"}}},"headingText":"**Problem 1 - Abalone Data**","containsRefs":false,"markdown":"\n\n\n1.1\n\n```{r}\n#' Step 1: Read the raw data from the CSV file.\nabalone <- read.csv(\"abalone.data\", header = FALSE) \n#' Step 2: Define the correct column names.\ncolumn_names <- c( \"Sex\", \"Length\", \"Diameter\", \"Height\", \"Whole_weight\", \"Shucked_weight\", \"Viscera_weight\", \"Shell_weight\", \"Rings\" ) \n#' Step 3: Assign the defined names to the data frame's columns.\ncolnames(abalone) <- column_names \n#' Step 4: Display the first few rows to verify the data was loaded correctly.\nhead(abalone)\n```\n\n1.2\n\n```{r}\n#' Step 1: Use table() to calculate number in different sex.\nsex_counts <- table(abalone$Sex)\n#' Step 2: Use print to output the data.\nprint(sex_counts)\n```\n\n1.3\n\n```{r}\n#'Step 1: Calculate different weights' correlation with rings.\nwhole_weight_cor <- cor(abalone$Whole_weight, abalone$Rings)\nshucked_weight_cor <- cor(abalone$Shucked_weight, abalone$Rings)\nviscera_weight_cor <- cor(abalone$Viscera_weight, abalone$Rings)\nshell_weight_cor <- cor(abalone$Shell_weight, abalone$Rings)\n#'Step 2: Put the value and the name in a group,which can help us compare later.\ngroup1 <- c(\n  \"Whole_weight\" = cor(abalone$Whole_weight, abalone$Rings),\n  \"Shucked_weight\" = cor(abalone$Shucked_weight, abalone$Rings),\n  \"Viscera_weight\" = cor(abalone$Viscera_weight, abalone$Rings),\n  \"Shell_weight\" = cor(abalone$Shell_weight, abalone$Rings)\n)\n#'Step 3: Compare the value and get the max value and its name.\nhighest_corr <- which.max(abs(group1))\ncat(\"the weight which has the highest correlation with rings is:\", names(highest_corr), \"\\n\")\n#'Step 1: Separate the data into different sex groups.\nabalone_F <- subset(abalone, Sex == \"F\")\nabalone_I <- subset(abalone, Sex == \"I\")\nabalone_M <- subset(abalone, Sex == \"M\")\nhighest_corr_name <-names(highest_corr)\n#'Step 2: Calculate the different correlation.\ncor_F <- cor(abalone_F[,names(highest_corr)], abalone_F$Rings)\ncor_I <- cor(abalone_I[,names(highest_corr)], abalone_I$Rings)\ncor_M <- cor(abalone_M[,names(highest_corr)], abalone_M$Rings)\n\n#'Step 3: Compare by the sex.\ngroup2 <- c(\n  \"F\" = cor_F,\n  \"I\" = cor_I,\n  \"M\" = cor_M\n)\nhighest_sex <- which.max(abs(group2))\ncat(\"the sex has the highest correlation is:\", names(highest_sex), \"\\n\")\n#'Step 1: Find the max ring.\nmax_rings <- max(abalone$Rings)\n#'Step 2: Find the data with the max ring.\nmax_rings_data <- abalone[abalone$Rings == max_rings, ]\n#'Step 3: Print.\ncat(\"the weights of the abalone with the most rings are:\")\nprint(max_rings_data[, c(\"Whole_weight\", \"Shucked_weight\", \"Viscera_weight\", \"Shell_weight\")])\npercentage <- sum(abalone$Viscera_weight > abalone$Shell_weight) / nrow(abalone) * 100\ncat(\"the percentage of abalones have a viscera weight larger than their shell weight is:\", round(percentage, 2), \"%\\n\")\n```\n\n## **Problem 2 - Food Expenditure Data**\n\n2.1\n\n```{r}\n#' import data\nfood_data <- read.csv(\"food_expenditure.csv\", header = TRUE)\n```\n\n2.2\n\n```{r}\n#'Step 1: Simplify the name.\nnew_column_names <- c(\n  \"id\", \"age\", \"household_size\", \"state\", \"currency\",\n  \"total_expenditure\", \"grocery_expenditure\", \"dining_out_expenditure\",\n  \"misc_expenditure\", \"dining_out_times\", \"incl_alcohol\", \"food_assistance\"\n)\n#' Step 2: Replace the name.\ncolnames(food_data) <- new_column_names\n#' Step 3: Check the name.\nnames(food_data)\n```\n\n2.3\n\n```{r}\n#' Step 1: Show the counts before restrict.\ncat(\"Before:\", nrow(food_data), \"\\n\")\n#' Step 2: restrict to USD.\nfood_data_usd <- subset(food_data, currency == \"USD\")\n#' Step 3: Show the counts after restrict.\ncat(\"After:\", nrow(food_data_usd), \"\\n\")\n```\n\n2.4\n\n```{r}\ncleaned_food_data <- food_data_usd\n#' Step 1: Show the lines before cleaning.\ncat(\"Before:\", nrow(cleaned_food_data), \"\\n\")\n#' Step 2: Clean the data age under 18.\ncleaned_food_data <- subset(cleaned_food_data, age >= 18)\ncat(\"After(age):\", nrow(cleaned_food_data), \"\\n\")\n#' Step 3: Clean the data state that is none.\ncleaned_food_data <- subset(cleaned_food_data, state != \"\" & state != \"None\")\ncat(\"Afer(state):\", nrow(cleaned_food_data), \"\\n\")\n#' Step 4: Clean the data expenditure is negative.\ncleaned_food_data <- subset(cleaned_food_data, total_expenditure >= 0 & \n                                  grocery_expenditure >= 0 & \n                                  dining_out_expenditure >= 0 & \n                                  misc_expenditure >= 0)\ncat(\"Afer(expenditure):\", nrow(cleaned_food_data), \"\\n\")\n#' Step 5: Clean the data out times is over 21(because people only eat 21 times in a week).\ncleaned_food_data <- subset(cleaned_food_data, dining_out_times <= 21)\ncat(\"After(out times):\", nrow(cleaned_food_data), \"\\n\")\ncat(\"--- Final repoert ---\\n\")\ncat(\"After all clean,the counts are:\", nrow(cleaned_food_data), \"\\n\")\nhead(cleaned_food_data)\n```\n\n## **Problem 3 - Collatz conjecture**\n\n3.1\n\n```{r}\n#' Compute the next number in a Collatz sequence.\n#' This function takes a positive integer and applies the Collatz conjecture rules:\n#' if the number is even, it divides it by 2; if it's odd, it multiplies it by 3 and adds 1.\n#' @param n A single positive integer.\n#' @return A positive integer representing the next number in the Collatz sequence.\n#' @examples\n#' nextCollatz(5)\n#' nextCollatz(16)\n#' @export\nnextCollatz <- function(n) {\n  #' Step 1: Check if n is a single positive integer.\n  if (length(n) != 1 || !is.numeric(n) || n <= 0 || n %% 1 != 0) {\n    stop(\"Input must be a single positive integer.\")\n  }\n\n  #' Step 2: Use the Collatz rules.\n  if (n %% 2 == 0) {\n    return(n / 2)\n  } \n  else {\n    return(3 * n + 1)\n  }\n}\ncat(\"nextCollatz(5) = \", nextCollatz(5), \"\\n\")\ncat(\"nextCollatz(16) = \", nextCollatz(16), \"\\n\")\n```\n\n3.2\n\n```{r}\n#' Generate a Collatz sequence.\n#' This function computes the complete Collatz sequence for a given positive integer,\n#' starting at the input and ending at 1. It uses the nextCollatz function\n#' to perform the step-by-step calculation.\n#' @param n A single positive integer.\n#' @return A list containing two elements:\n#'   - `sequence`: A numeric vector of the entries in the Collatz sequence.\n#'   - `length`: An integer representing the length of the sequence.\n#' @examples\n#' collatzSequence(5)\n#' collatzSequence(19)\n#' @export\ncollatzSequence <- function(n) {\n  #' Step 1: Check if n is a single positive integer\n  if (length(n) != 1 || !is.numeric(n) || n <= 0 || n %% 1 != 0) {\n    stop(\"Input must be a single positive integer.\")\n  }\n  current_number <- n\n  sequence <- c(n)\n  while (current_number != 1) {\n    current_number <- nextCollatz(current_number)\n    sequence <- c(sequence, current_number)\n  }\n  return(list(\n    sequence = sequence,\n    length = length(sequence)\n  ))\n}\ncat(\"collatzSequence(5) =\")\nprint(collatzSequence(5)$sequence)\ncat(\"\\ncollatzSequence(19) =\")\nprint(collatzSequence(19)$sequence)\n```\n\n3.3\n\n```{r}\n#' Use Collatz sequence to find the shortest and longest sequence.\n#' Use virable to save the information about thelongest and shortest sequence.\nshortest_length <- Inf\nshortest_start <- NA\nlongest_length <- 0\nlongest_start <- NA\n\n#' Step 1: Use a loop to experience all number between 100 and 500.\nfor (i in 100:500) {\n  #' Step 2: Use if to judge whether need to update the longest or shortest sequence.\n  sequence_info <- collatzSequence(i)\n  current_length <- sequence_info$length\n  if (current_length < shortest_length) {\n    shortest_length <- current_length\n    shortest_start <- i\n  }\n  if (current_length > longest_length) {\n    longest_length <- current_length\n    longest_start <- i\n  }\n}\ncat(\"--- Final Report ---\\n\")\ncat(\"shortest:\\n\")\ncat(\"start:\", shortest_start, \"\\n\")\ncat(\"length:\", shortest_length, \"\\n\")\ncat(\"\\n\")\ncat(\"longest:\\n\")\ncat(\"start:\", longest_start, \"\\n\")\ncat(\"length:\", longest_length, \"\\n\")\n```\n","srcMarkdownNoYaml":"\n\n## **Problem 1 - Abalone Data**\n\n1.1\n\n```{r}\n#' Step 1: Read the raw data from the CSV file.\nabalone <- read.csv(\"abalone.data\", header = FALSE) \n#' Step 2: Define the correct column names.\ncolumn_names <- c( \"Sex\", \"Length\", \"Diameter\", \"Height\", \"Whole_weight\", \"Shucked_weight\", \"Viscera_weight\", \"Shell_weight\", \"Rings\" ) \n#' Step 3: Assign the defined names to the data frame's columns.\ncolnames(abalone) <- column_names \n#' Step 4: Display the first few rows to verify the data was loaded correctly.\nhead(abalone)\n```\n\n1.2\n\n```{r}\n#' Step 1: Use table() to calculate number in different sex.\nsex_counts <- table(abalone$Sex)\n#' Step 2: Use print to output the data.\nprint(sex_counts)\n```\n\n1.3\n\n```{r}\n#'Step 1: Calculate different weights' correlation with rings.\nwhole_weight_cor <- cor(abalone$Whole_weight, abalone$Rings)\nshucked_weight_cor <- cor(abalone$Shucked_weight, abalone$Rings)\nviscera_weight_cor <- cor(abalone$Viscera_weight, abalone$Rings)\nshell_weight_cor <- cor(abalone$Shell_weight, abalone$Rings)\n#'Step 2: Put the value and the name in a group,which can help us compare later.\ngroup1 <- c(\n  \"Whole_weight\" = cor(abalone$Whole_weight, abalone$Rings),\n  \"Shucked_weight\" = cor(abalone$Shucked_weight, abalone$Rings),\n  \"Viscera_weight\" = cor(abalone$Viscera_weight, abalone$Rings),\n  \"Shell_weight\" = cor(abalone$Shell_weight, abalone$Rings)\n)\n#'Step 3: Compare the value and get the max value and its name.\nhighest_corr <- which.max(abs(group1))\ncat(\"the weight which has the highest correlation with rings is:\", names(highest_corr), \"\\n\")\n#'Step 1: Separate the data into different sex groups.\nabalone_F <- subset(abalone, Sex == \"F\")\nabalone_I <- subset(abalone, Sex == \"I\")\nabalone_M <- subset(abalone, Sex == \"M\")\nhighest_corr_name <-names(highest_corr)\n#'Step 2: Calculate the different correlation.\ncor_F <- cor(abalone_F[,names(highest_corr)], abalone_F$Rings)\ncor_I <- cor(abalone_I[,names(highest_corr)], abalone_I$Rings)\ncor_M <- cor(abalone_M[,names(highest_corr)], abalone_M$Rings)\n\n#'Step 3: Compare by the sex.\ngroup2 <- c(\n  \"F\" = cor_F,\n  \"I\" = cor_I,\n  \"M\" = cor_M\n)\nhighest_sex <- which.max(abs(group2))\ncat(\"the sex has the highest correlation is:\", names(highest_sex), \"\\n\")\n#'Step 1: Find the max ring.\nmax_rings <- max(abalone$Rings)\n#'Step 2: Find the data with the max ring.\nmax_rings_data <- abalone[abalone$Rings == max_rings, ]\n#'Step 3: Print.\ncat(\"the weights of the abalone with the most rings are:\")\nprint(max_rings_data[, c(\"Whole_weight\", \"Shucked_weight\", \"Viscera_weight\", \"Shell_weight\")])\npercentage <- sum(abalone$Viscera_weight > abalone$Shell_weight) / nrow(abalone) * 100\ncat(\"the percentage of abalones have a viscera weight larger than their shell weight is:\", round(percentage, 2), \"%\\n\")\n```\n\n## **Problem 2 - Food Expenditure Data**\n\n2.1\n\n```{r}\n#' import data\nfood_data <- read.csv(\"food_expenditure.csv\", header = TRUE)\n```\n\n2.2\n\n```{r}\n#'Step 1: Simplify the name.\nnew_column_names <- c(\n  \"id\", \"age\", \"household_size\", \"state\", \"currency\",\n  \"total_expenditure\", \"grocery_expenditure\", \"dining_out_expenditure\",\n  \"misc_expenditure\", \"dining_out_times\", \"incl_alcohol\", \"food_assistance\"\n)\n#' Step 2: Replace the name.\ncolnames(food_data) <- new_column_names\n#' Step 3: Check the name.\nnames(food_data)\n```\n\n2.3\n\n```{r}\n#' Step 1: Show the counts before restrict.\ncat(\"Before:\", nrow(food_data), \"\\n\")\n#' Step 2: restrict to USD.\nfood_data_usd <- subset(food_data, currency == \"USD\")\n#' Step 3: Show the counts after restrict.\ncat(\"After:\", nrow(food_data_usd), \"\\n\")\n```\n\n2.4\n\n```{r}\ncleaned_food_data <- food_data_usd\n#' Step 1: Show the lines before cleaning.\ncat(\"Before:\", nrow(cleaned_food_data), \"\\n\")\n#' Step 2: Clean the data age under 18.\ncleaned_food_data <- subset(cleaned_food_data, age >= 18)\ncat(\"After(age):\", nrow(cleaned_food_data), \"\\n\")\n#' Step 3: Clean the data state that is none.\ncleaned_food_data <- subset(cleaned_food_data, state != \"\" & state != \"None\")\ncat(\"Afer(state):\", nrow(cleaned_food_data), \"\\n\")\n#' Step 4: Clean the data expenditure is negative.\ncleaned_food_data <- subset(cleaned_food_data, total_expenditure >= 0 & \n                                  grocery_expenditure >= 0 & \n                                  dining_out_expenditure >= 0 & \n                                  misc_expenditure >= 0)\ncat(\"Afer(expenditure):\", nrow(cleaned_food_data), \"\\n\")\n#' Step 5: Clean the data out times is over 21(because people only eat 21 times in a week).\ncleaned_food_data <- subset(cleaned_food_data, dining_out_times <= 21)\ncat(\"After(out times):\", nrow(cleaned_food_data), \"\\n\")\ncat(\"--- Final repoert ---\\n\")\ncat(\"After all clean,the counts are:\", nrow(cleaned_food_data), \"\\n\")\nhead(cleaned_food_data)\n```\n\n## **Problem 3 - Collatz conjecture**\n\n3.1\n\n```{r}\n#' Compute the next number in a Collatz sequence.\n#' This function takes a positive integer and applies the Collatz conjecture rules:\n#' if the number is even, it divides it by 2; if it's odd, it multiplies it by 3 and adds 1.\n#' @param n A single positive integer.\n#' @return A positive integer representing the next number in the Collatz sequence.\n#' @examples\n#' nextCollatz(5)\n#' nextCollatz(16)\n#' @export\nnextCollatz <- function(n) {\n  #' Step 1: Check if n is a single positive integer.\n  if (length(n) != 1 || !is.numeric(n) || n <= 0 || n %% 1 != 0) {\n    stop(\"Input must be a single positive integer.\")\n  }\n\n  #' Step 2: Use the Collatz rules.\n  if (n %% 2 == 0) {\n    return(n / 2)\n  } \n  else {\n    return(3 * n + 1)\n  }\n}\ncat(\"nextCollatz(5) = \", nextCollatz(5), \"\\n\")\ncat(\"nextCollatz(16) = \", nextCollatz(16), \"\\n\")\n```\n\n3.2\n\n```{r}\n#' Generate a Collatz sequence.\n#' This function computes the complete Collatz sequence for a given positive integer,\n#' starting at the input and ending at 1. It uses the nextCollatz function\n#' to perform the step-by-step calculation.\n#' @param n A single positive integer.\n#' @return A list containing two elements:\n#'   - `sequence`: A numeric vector of the entries in the Collatz sequence.\n#'   - `length`: An integer representing the length of the sequence.\n#' @examples\n#' collatzSequence(5)\n#' collatzSequence(19)\n#' @export\ncollatzSequence <- function(n) {\n  #' Step 1: Check if n is a single positive integer\n  if (length(n) != 1 || !is.numeric(n) || n <= 0 || n %% 1 != 0) {\n    stop(\"Input must be a single positive integer.\")\n  }\n  current_number <- n\n  sequence <- c(n)\n  while (current_number != 1) {\n    current_number <- nextCollatz(current_number)\n    sequence <- c(sequence, current_number)\n  }\n  return(list(\n    sequence = sequence,\n    length = length(sequence)\n  ))\n}\ncat(\"collatzSequence(5) =\")\nprint(collatzSequence(5)$sequence)\ncat(\"\\ncollatzSequence(19) =\")\nprint(collatzSequence(19)$sequence)\n```\n\n3.3\n\n```{r}\n#' Use Collatz sequence to find the shortest and longest sequence.\n#' Use virable to save the information about thelongest and shortest sequence.\nshortest_length <- Inf\nshortest_start <- NA\nlongest_length <- 0\nlongest_start <- NA\n\n#' Step 1: Use a loop to experience all number between 100 and 500.\nfor (i in 100:500) {\n  #' Step 2: Use if to judge whether need to update the longest or shortest sequence.\n  sequence_info <- collatzSequence(i)\n  current_length <- sequence_info$length\n  if (current_length < shortest_length) {\n    shortest_length <- current_length\n    shortest_start <- i\n  }\n  if (current_length > longest_length) {\n    longest_length <- current_length\n    longest_start <- i\n  }\n}\ncat(\"--- Final Report ---\\n\")\ncat(\"shortest:\\n\")\ncat(\"start:\", shortest_start, \"\\n\")\ncat(\"length:\", shortest_length, \"\\n\")\ncat(\"\\n\")\ncat(\"longest:\\n\")\ncat(\"start:\", longest_start, \"\\n\")\ncat(\"length:\", longest_length, \"\\n\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":{"self_contained":"yes"}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"HW1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","title":"HW1"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}